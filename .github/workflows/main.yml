name: RDP4 with Persistent Storage

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Configure Git for automation
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions[bot]"
          git config --global pull.rebase false

      - name: Create directory structure
        run: |
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Documents" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Desktop" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Downloads" -Force
          
          New-Item -ItemType Directory -Path "./persistent-storage" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Documents" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Desktop" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Downloads" -Force

      - name: Restore persistent files
        run: |
          Write-Host "Restoring files from previous session..."
          
          if (Test-Path "./persistent-storage/Documents/" -PathType Container) {
              $docFiles = Get-ChildItem -Path "./persistent-storage/Documents/" -File
              if ($docFiles.Count -gt 0) {
                  Copy-Item -Path "./persistent-storage/Documents/*" -Destination "C:\Users\RDP4\Documents\" -Recurse -Force
                  Write-Host "Restored $($docFiles.Count) files to Documents"
              }
          }
          
          if (Test-Path "./persistent-storage/Desktop/" -PathType Container) {
              $desktopFiles = Get-ChildItem -Path "./persistent-storage/Desktop/" -File
              if ($desktopFiles.Count -gt 0) {
                  Copy-Item -Path "./persistent-storage/Desktop/*" -Destination "C:\Users\RDP4\Desktop\" -Recurse -Force
                  Write-Host "Restored $($desktopFiles.Count) files to Desktop"
              }
          }
          
          if (Test-Path "./persistent-storage/Downloads/" -PathType Container) {
              $downloadFiles = Get-ChildItem -Path "./persistent-storage/Downloads/" -File
              if ($downloadFiles.Count -gt 0) {
                  Copy-Item -Path "./persistent-storage/Downloads/*" -Destination "C:\Users\RDP4\Downloads\" -Recurse -Force
                  Write-Host "Restored $($downloadFiles.Count) files to Downloads"
              }
          }

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
      
      - name: Create RDP4 User with Fixed Password
        run: |
          $fixedPassword = "${{ secrets.RDP4_FIXED_PASSWORD }}"
          $securePass = ConvertTo-SecureString $fixedPassword -AsPlainText -Force
          $userExists = Get-LocalUser -Name "RDP4" -ErrorAction SilentlyContinue
          if ($userExists) {
              Set-LocalUser -Name "RDP4" -Password $securePass
          } else {
              New-LocalUser -Name "RDP4" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "RDP4" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP4" -ErrorAction SilentlyContinue
      
      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force
      
      - name: Purge existing hostname from Tailnet
        run: |
          Write-Host "Purging any existing RDP4 hostname from Tailnet..."
          
          # First, disconnect completely
          & "$env:ProgramFiles\Tailscale\tailscale.exe" down
          Start-Sleep -Seconds 3
          
          # Check if RDP4 hostname exists in Tailnet and remove it
          try {
              # Get list of devices in Tailnet
              $devices = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json | ConvertFrom-Json
              
              if ($devices -and $devices.Peer) {
                  foreach ($device in $devices.Per.PSObject.Properties) {
                      $deviceInfo = $device.Value
                      if ($deviceInfo.DNSName -like "*RDP4*") {
                          Write-Host "Found existing device: $($deviceInfo.DNSName) with IP: $($deviceInfo.TailscaleIPs)"
                          # Revoke the device from Tailnet
                          & "$env:ProgramFiles\Tailscale\tailscale.exe" revoke $deviceInfo.TailscaleIPs[0]
                          Write-Host "Revoked device: $($deviceInfo.DNSName)"
                      }
                  }
              }
          } catch {
              Write-Host "Could not check existing devices (may not be connected yet): $($_.Exception.Message)"
          }
          
          # Additional cleanup: remove any local state
          & "$env:ProgramFiles\Tailscale\tailscale.exe" logout
          Start-Sleep -Seconds 2
      
      - name: Establish Tailscale Connection with RDP4 hostname
        run: |
          $desiredHostname = "RDP4"
          Write-Host "Forcing hostname: $desiredHostname"
          
          # Clean any existing local state
          & "$env:ProgramFiles\Tailscale\tailscale.exe" down
          Start-Sleep -Seconds 2
          
          # Force the desired hostname with --force-reauth to ensure fresh connection
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$desiredHostname --accept-routes=true --accept-dns=true --reset --force-reauth
          
          $tsIP = $null
          $tsHostname = $null
          $retries = 0
          $maxRetries = 25
          
          while ($retries -lt $maxRetries) {
              $status = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json -ErrorAction SilentlyContinue
              if ($status -and $status.BackendState -eq "Running") {
                  $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                  $tsHostname = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json | Select-Object -ExpandProperty Self | Select-Object -ExpandProperty DNSName -ErrorAction SilentlyContinue
                  if ($tsIP -and $tsHostname) { 
                      Write-Host "Successfully connected to Tailscale!"
                      
                      # Verify hostname is correct
                      if ($tsHostname -like "*RDP4*") {
                          Write-Host "âœ“ Hostname verified: $tsHostname"
                          break
                      } else {
                          Write-Host "Hostname mismatch. Got: $tsHostname, Expected: RDP4"
                          $tsIP = $null
                      }
                  }
              }
              Write-Host "Waiting for Tailscale connection... (Attempt $($retries + 1)/$maxRetries)"
              Start-Sleep -Seconds 3
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale failed to connect with hostname RDP4 after $maxRetries attempts"
              
              # Last resort: try with completely clean state
              Write-Host "Trying complete cleanup and reconnect..."
              & "$env:ProgramFiles\Tailscale\tailscale.exe" down
              & "$env:ProgramFiles\Tailscale\tailscale.exe" logout
              Start-Sleep -Seconds 3
              
              # Reinstall Tailscale to ensure clean state
              $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
              $installerPath = "$env:TEMP\tailscale-clean.msi"
              Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
              Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
              Remove-Item $installerPath -Force
              Start-Sleep -Seconds 5
              
              & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$desiredHostname --accept-routes=true --accept-dns=true --reset --force-reauth
              
              $retries = 0
              while ($retries -lt 15) {
                  $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
                  if ($tsIP) { break }
                  Start-Sleep -Seconds 2
                  $retries++
              }
              
              if (-not $tsIP) {
                  Write-Error "Tailscale completely failed to connect"
                  exit 1
              }
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "TAILSCALE_HOSTNAME=$tsHostname" >> $env:GITHUB_ENV
          echo "RDP_CONNECTION_STRING=$desiredHostname" >> $env:GITHUB_ENV
          Write-Host "Tailscale connected successfully!"
          Write-Host "IP: $tsIP"
          Write-Host "Hostname: $tsHostname"
          Write-Host "Connection Name: $desiredHostname"
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connection to: $env:TAILSCALE_IP"
          
          $maxRetries = 15
          $retryCount = 0
          $connected = $false
          
          while ($retryCount -lt $maxRetries -and -not $connected) {
              try {
                  $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Quiet -ErrorAction Stop
                  if ($testResult) {
                      $connected = $true
                      Write-Host "RDP connection successful!"
                      break
                  }
              } catch {
                  Write-Host "RDP test attempt $($retryCount + 1)/$maxRetries failed, retrying..."
              }
              $retryCount++
              Start-Sleep -Seconds 2
          }
          
          if (-not $connected) {
              Write-Error "RDP connection failed after $maxRetries attempts"
              exit 1
          }
      
      - name: Display Connection Information
        run: |
          Write-Host "`n=== RDP ACCESS INFORMATION ==="
          Write-Host "Connection Address: $env:RDP_CONNECTION_STRING"
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP4"
          Write-Host "=================================`n"
          
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## RDP Connection Details"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Address:** $env:RDP_CONNECTION_STRING"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**IP Address:** $env:TAILSCALE_IP"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Username:** RDP4"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Password:** `${{ secrets.RDP4_FIXED_PASSWORD }}"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Session Started:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

      - name: Auto-save files (runs in background)
        run: |
          function Backup-Files {
              param($sourcePath, $backupPath, $folderName)
              if (Test-Path $sourcePath -PathType Container) {
                  $files = Get-ChildItem -Path $sourcePath -File
                  if ($files.Count -gt 0) {
                      Write-Host "Backing up $($files.Count) files from $folderName..."
                      Remove-Item -Path "$backupPath/*" -Force -Recurse -ErrorAction SilentlyContinue
                      Copy-Item -Path "$sourcePath/*" -Destination $backupPath -Recurse -Force
                  }
              }
          }
          
          $lastBackup = Get-Date
          $backupInterval = 300
          $lastPush = Get-Date
          $pushInterval = 1800
          
          while ($true) {
              $currentTime = Get-Date
              if (($currentTime - $lastBackup).TotalSeconds -ge $backupInterval) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Auto-saving files..."
                  Backup-Files -sourcePath "C:\Users\RDP4\Documents" -backupPath "./persistent-storage/Documents" -folderName "Documents"
                  Backup-Files -sourcePath "C:\Users\RDP4\Desktop" -backupPath "./persistent-storage/Desktop" -folderName "Desktop"
                  Backup-Files -sourcePath "C:\Users\RDP4\Downloads" -backupPath "./persistent-storage/Downloads" -folderName "Downloads"
                  
                  if (($currentTime - $lastPush).TotalSeconds -ge $pushInterval) {
                      git add ./persistent-storage/
                      git commit -m "Auto-backup: $(Get-Date -Format 'yyyy-MM-dd HH:mm')" || echo "No changes to commit"
                      git pull --rebase origin main
                      git push origin main
                      $lastPush = $currentTime
                      Write-Host "Changes pushed to repository"
                  }
                  $lastBackup = $currentTime
              }
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Connect to: $env:RDP_CONNECTION_STRING"
              Start-Sleep -Seconds 60
          }

      - name: Final backup and push
        if: always()
        run: |
          Write-Host "Performing final backup before shutdown..."
          if (Test-Path "C:\Users\RDP4\Documents" -PathType Container) {
              Remove-Item -Path "./persistent-storage/Documents/*" -Force -Recurse -ErrorAction SilentlyContinue
              Copy-Item -Path "C:\Users\RDP4\Documents/*" -Destination "./persistent-storage/Documents/" -Recurse -Force
          }
          if (Test-Path "C:\Users\RDP4\Desktop" -PathType Container) {
              Remove-Item -Path "./persistent-storage/Desktop/*" -Force -Recurse -ErrorAction SilentlyContinue
              Copy-Item -Path "C:\Users\RDP4\Desktop/*" -Destination "./persistent-storage/Desktop/" -Recurse -Force
          }
          if (Test-Path "C:\Users\RDP4\Downloads" -PathType Container) {
              Remove-Item -Path "./persistent-storage/Downloads/*" -Force -Recurse -ErrorAction SilentlyContinue
              Copy-Item -Path "C:\Users\RDP4\Downloads/*" -Destination "./persistent-storage/Downloads/" -Recurse -Force
          }
          
          git add ./persistent-storage/
          git commit -m "Final backup: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" || echo "No changes to commit"
          git pull --rebase origin main
          git push origin main
          
          Write-Host "Final backup completed successfully!"
