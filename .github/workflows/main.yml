name: RDP4 with Persistent Storage

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Configure Git for automation
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions[bot]"
          git config --global pull.rebase false

      - name: Create directory structure
        run: |
          # Create user directories on C: drive
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Documents" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Desktop" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Downloads" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Pictures" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Videos" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Music" -Force
          
          # Create persistent storage directory in repo (on D: drive)
          New-Item -ItemType Directory -Path "./persistent-storage" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Documents" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Desktop" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Downloads" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Pictures" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Videos" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Music" -Force

      - name: Restore persistent files from repository
        run: |
          Write-Host "Restoring files from repository backup..."
          
          $restoredCount = 0
          
          # Restore all directories from repo backup to C: drive
          $directories = @(
              @{Source = "./persistent-storage/Documents"; Destination = "C:\Users\RDP4\Documents"; Name = "Documents"},
              @{Source = "./persistent-storage/Desktop"; Destination = "C:\Users\RDP4\Desktop"; Name = "Desktop"},
              @{Source = "./persistent-storage/Downloads"; Destination = "C:\Users\RDP4\Downloads"; Name = "Downloads"},
              @{Source = "./persistent-storage/Pictures"; Destination = "C:\Users\RDP4\Pictures"; Name = "Pictures"},
              @{Source = "./persistent-storage/Videos"; Destination = "C:\Users\RDP4\Videos"; Name = "Videos"},
              @{Source = "./persistent-storage/Music"; Destination = "C:\Users\RDP4\Music"; Name = "Music"}
          )
          
          foreach ($dir in $directories) {
              if (Test-Path $dir.Source -PathType Container) {
                  $files = Get-ChildItem -Path $dir.Source -File -Recurse
                  if ($files.Count -gt 0) {
                      Write-Host "Restoring $($files.Count) files to $($dir.Name)..."
                      # Clear destination first to avoid conflicts
                      Remove-Item -Path "$($dir.Destination)\*" -Recurse -Force -ErrorAction SilentlyContinue
                      Copy-Item -Path "$($dir.Source)\*" -Destination $dir.Destination -Recurse -Force
                      $restoredCount += $files.Count
                  } else {
                      Write-Host "No files found in $($dir.Name) backup"
                  }
              }
          }
          
          Write-Host "Total files restored: $restoredCount"

      - name: Create sample files if empty
        run: |
          # Create sample files if directories are empty to demonstrate the system
          $sampleContent = "This file was automatically created by RDP4 persistent storage system on $(Get-Date)"
          
          $directories = @(
              "C:\Users\RDP4\Documents",
              "C:\Users\RDP4\Desktop", 
              "C:\Users\RDP4\Downloads",
              "C:\Users\RDP4\Pictures",
              "C:\Users\RDP4\Videos",
              "C:\Users\RDP4\Music"
          )
          
          foreach ($dir in $directories) {
              $files = Get-ChildItem -Path $dir -File
              if ($files.Count -eq 0) {
                  $sampleFile = Join-Path $dir "README.txt"
                  $sampleContent | Out-File -FilePath $sampleFile -Encoding UTF8
                  Write-Host "Created sample file in $dir"
              }
          }

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale"
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
      
      - name: Create RDP4 User with Fixed Password
        run: |
          $fixedPassword = "${{ secrets.RDP4_FIXED_PASSWORD }}"
          $securePass = ConvertTo-SecureString $fixedPassword -AsPlainText -Force
          $userExists = Get-LocalUser -Name "RDP4" -ErrorAction SilentlyContinue
          if ($userExists) {
              Set-LocalUser -Name "RDP4" -Password $securePass
          } else {
              New-LocalUser -Name "RDP4" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "RDP4" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP4" -ErrorAction SilentlyContinue
      
      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: Establish Tailscale Connection with RDP4 hostname
        run: |
          $desiredHostname = "RDP4"
          Write-Host "Forcing hostname: $desiredHostname"
          
          & "$env:ProgramFiles\Tailscale\tailscale.exe" down
          Start-Sleep -Seconds 2
          
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$desiredHostname --accept-routes=true --accept-dns=true --reset
          
          $tsIP = $null
          $retries = 0
          $maxRetries = 20
          
          while ($retries -lt $maxRetries) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
              if ($tsIP) { break }
              Start-Sleep -Seconds 3
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale failed to connect after $maxRetries attempts"
              exit 1
          }
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "RDP_CONNECTION_STRING=$desiredHostname" >> $env:GITHUB_ENV
          Write-Host "Tailscale connected successfully! IP: $tsIP"
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connection to: $env:TAILSCALE_IP"
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "RDP connection failed"
              exit 1
          }
          Write-Host "RDP connection successful!"
      
      - name: Display Connection Information
        run: |
          Write-Host "`n=== RDP ACCESS INFORMATION ==="
          Write-Host "Connection Address: $env:RDP_CONNECTION_STRING"
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP4"
          Write-Host "=================================`n"
          
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## RDP Connection Details"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Address:** $env:RDP_CONNECTION_STRING"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**IP Address:** $env:TAILSCALE_IP"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Username:** RDP4"

      - name: Continuous backup service
        run: |
          function Backup-AllFiles {
              param()
              
              $backupDirs = @(
                  @{Source = "C:\Users\RDP4\Documents"; Backup = "./persistent-storage/Documents"; Name = "Documents"},
                  @{Source = "C:\Users\RDP4\Desktop"; Backup = "./persistent-storage/Desktop"; Name = "Desktop"},
                  @{Source = "C:\Users\RDP4\Downloads"; Backup = "./persistent-storage/Downloads"; Name = "Downloads"},
                  @{Source = "C:\Users\RDP4\Pictures"; Backup = "./persistent-storage/Pictures"; Name = "Pictures"},
                  @{Source = "C:\Users\RDP4\Videos"; Backup = "./persistent-storage/Videos"; Name = "Videos"},
                  @{Source = "C:\Users\RDP4\Music"; Backup = "./persistent-storage/Music"; Name = "Music"}
              )
              
              $totalFiles = 0
              
              foreach ($dir in $backupDirs) {
                  if (Test-Path $dir.Source -PathType Container) {
                      $files = Get-ChildItem -Path $dir.Source -File -Recurse
                      if ($files.Count -gt 0) {
                          Write-Host "Backing up $($files.Count) files from $($dir.Name)..."
                          # Clear backup directory first
                          Remove-Item -Path "$($dir.Backup)\*" -Force -Recurse -ErrorAction SilentlyContinue
                          # Copy files from C: drive to repository backup directory
                          Copy-Item -Path "$($dir.Source)\*" -Destination $dir.Backup -Recurse -Force
                          $totalFiles += $files.Count
                      }
                  }
              }
              
              return $totalFiles
          }
          
          $lastBackup = Get-Date
          $lastPush = Get-Date
          
          while ($true) {
              $currentTime = Get-Date
              
              # Backup files every 2 minutes
              if (($currentTime - $lastBackup).TotalMinutes -ge 2) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Starting backup..."
                  $fileCount = Backup-AllFiles
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Backup completed: $fileCount files"
                  $lastBackup = $currentTime
              }
              
              # Push to GitHub every 10 minutes
              if (($currentTime - $lastPush).TotalMinutes -ge 10) {
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Pushing changes to GitHub..."
                  git add ./persistent-storage/
                  git commit -m "Auto-backup: $(Get-Date -Format 'yyyy-MM-dd HH:mm')" || echo "No changes to commit"
                  git pull --rebase origin main
                  git push origin main
                  $lastPush = $currentTime
                  Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Changes pushed to repository"
              }
              
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Connect to: $env:RDP_CONNECTION_STRING"
              Start-Sleep -Seconds 30
          }

      - name: Emergency backup on cancellation
        if: cancelled() || failure()
        run: |
          Write-Host "EMERGENCY BACKUP: Workflow was cancelled or failed!"
          
          # Backup all files immediately from C: drive to repository
          $backupDirs = @(
              @{Source = "C:\Users\RDP4\Documents"; Backup = "./persistent-storage/Documents"; Name = "Documents"},
              @{Source = "C:\Users\RDP4\Desktop"; Backup = "./persistent-storage/Desktop"; Name = "Desktop"},
              @{Source = "C:\Users\RDP4\Downloads"; Backup = "./persistent-storage/Downloads"; Name = "Downloads"},
              @{Source = "C:\Users\RDP4\Pictures"; Backup = "./persistent-storage/Pictures"; Name = "Pictures"},
              @{Source = "C:\Users\RDP4\Videos"; Backup = "./persistent-storage/Videos"; Name = "Videos"},
              @{Source = "C:\Users\RDP4\Music"; Backup = "./persistent-storage/Music"; Name = "Music"}
          )
          
          $totalFiles = 0
          foreach ($dir in $backupDirs) {
              if (Test-Path $dir.Source -PathType Container) {
                  $files = Get-ChildItem -Path $dir.Source -File -Recurse
                  if ($files.Count -gt 0) {
                      Write-Host "Emergency backup of $($files.Count) files from $($dir.Name)..."
                      Remove-Item -Path "$($dir.Backup)\*" -Force -Recurse -ErrorAction SilentlyContinue
                      Copy-Item -Path "$($dir.Source)\*" -Destination $dir.Backup -Recurse -Force
                      $totalFiles += $files.Count
                  }
              }
          }
          
          Write-Host "Emergency backup completed: $totalFiles files"
          
          # Push to GitHub
          git add ./persistent-storage/
          git commit -m "EMERGENCY BACKUP: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" || echo "No changes to commit"
          git pull --rebase origin main
          git push origin main
          
          Write-Host "Emergency backup pushed to GitHub repository!"

      - name: Final backup and push
        if: always()
        run: |
          Write-Host "Performing final backup before shutdown..."
          
          $backupDirs = @(
              @{Source = "C:\Users\RDP4\Documents"; Backup = "./persistent-storage/Documents"; Name = "Documents"},
              @{Source = "C:\Users\RDP4\Desktop"; Backup = "./persistent-storage/Desktop"; Name = "Desktop"},
              @{Source = "C:\Users\RDP4\Downloads"; Backup = "./persistent-storage/Downloads"; Name = "Downloads"},
              @{Source = "C:\Users\RDP4\Pictures"; Backup = "./persistent-storage/Pictures"; Name = "Pictures"},
              @{Source = "C:\Users\RDP4\Videos"; Backup = "./persistent-storage/Videos"; Name = "Videos"},
              @{Source = "C:\Users\RDP4\Music"; Backup = "./persistent-storage/Music"; Name = "Music"}
          )
          
          $totalFiles = 0
          foreach ($dir in $backupDirs) {
              if (Test-Path $dir.Source -PathType Container) {
                  $files = Get-ChildItem -Path $dir.Source -File -Recurse
                  if ($files.Count -gt 0) {
                      Write-Host "Backing up $($files.Count) files from $($dir.Name)..."
                      Remove-Item -Path "$($dir.Backup)\*" -Force -Recurse -ErrorAction SilentlyContinue
                      Copy-Item -Path "$($dir.Source)\*" -Destination $dir.Backup -Recurse -Force
                      $totalFiles += $files.Count
                  }
              }
          }
          
          Write-Host "Final backup completed: $totalFiles files"
          
          git add ./persistent-storage/
          git commit -m "Final backup: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" || echo "No changes to commit"
          git pull --rebase origin main
          git push origin main
          
          Write-Host "Final backup pushed to GitHub repository!"
