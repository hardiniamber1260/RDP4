name: RDP4 with Persistent Storage

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Runs every 6 hours

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          fetch-depth: 0

      - name: Configure Git for automation
        run: |
          git config --global user.email "github-actions@github.com"
          git config --global user.name "github-actions[bot]"
          git config --global pull.rebase false

      - name: Create directory structure
        run: |
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Documents" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Desktop" -Force
          New-Item -ItemType Directory -Path "C:\Users\RDP4\Downloads" -Force
          
          New-Item -ItemType Directory -Path "./persistent-storage" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Documents" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Desktop" -Force
          New-Item -ItemType Directory -Path "./persistent-storage/Downloads" -Force

      - name: Restore persistent files
        run: |
          Write-Host "Restoring files from previous session..."
          
          if (Test-Path "./persistent-storage/Documents/" -PathType Container) {
              Copy-Item -Path "./persistent-storage/Documents/*" -Destination "C:\Users\RDP4\Documents\" -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          if (Test-Path "./persistent-storage/Desktop/" -PathType Container) {
              Copy-Item -Path "./persistent-storage/Desktop/*" -Destination "C:\Users\RDP4\Desktop\" -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          if (Test-Path "./persistent-storage/Downloads/" -PathType Container) {
              Copy-Item -Path "./persistent-storage/Downloads/*" -Destination "C:\Users\RDP4\Downloads\" -Recurse -Force -ErrorAction SilentlyContinue
          }

      - name: Configure Core RDP Settings
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall set rule name="Remote Desktop - User Mode (TCP-In)" new enable=yes
          netsh advfirewall firewall set rule name="Remote Desktop - User Mode (UDP-In)" new enable=yes
          Restart-Service -Name TermService -Force
      
      - name: Create RDP4 User with Fixed Password
        run: |
          $fixedPassword = "${{ secrets.RDP4_FIXED_PASSWORD }}"
          $securePass = ConvertTo-SecureString $fixedPassword -AsPlainText -Force
          $userExists = Get-LocalUser -Name "RDP4" -ErrorAction SilentlyContinue
          if ($userExists) {
              Set-LocalUser -Name "RDP4" -Password $securePass
          } else {
              New-LocalUser -Name "RDP4" -Password $securePass -AccountNeverExpires
          }
          Add-LocalGroupMember -Group "Administrators" -Member "RDP4" -ErrorAction SilentlyContinue
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP4" -ErrorAction SilentlyContinue
      
      - name: Install Tailscale
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-latest-amd64.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath
          Start-Process msiexec.exe -ArgumentList "/i", "`"$installerPath`"", "/quiet", "/norestart" -Wait
          Remove-Item $installerPath -Force

      - name: ðŸ§¹ PURGE any devices containing 'RDP4' (startup)
        run: |
          Write-Host "Attempting to purge existing RDP4 devices from Tailnet..."
          
          $apiKey = "${{ secrets.TAILSCALE_API_KEY }}"
          $tailnet = "${{ secrets.TAILSCALE_TAILNET }}"
          
          if (-not $apiKey -or -not $tailnet) {
              Write-Host "API key or tailnet not configured, skipping purge"
              exit 0
          }
          
          $hdr = @{ 
              Authorization = "Bearer $apiKey"
          }
          
          try {
              # First, get all devices in the tailnet
              $uri = "https://api.tailscale.com/api/v2/tailnet/$tailnet/devices"
              Write-Host "Calling API: $uri"
              
              $resp = Invoke-RestMethod -Method GET -Headers $hdr -Uri $uri
              
              foreach ($device in $resp.devices) {
                  if ($device.name -match '(?i)RDP4' -or $device.hostname -match '(?i)RDP4' -or $device.addresses -match 'RDP4') {
                      Write-Host "Found RDP4 device: $($device.name) (ID: $($device.id))"
                      
                      # Delete the device
                      $deleteUri = "https://api.tailscale.com/api/v2/device/$($device.id)"
                      try {
                          Invoke-RestMethod -Method DELETE -Headers $hdr -Uri $deleteUri | Out-Null
                          Write-Host "âœ“ Successfully deleted device: $($device.name)"
                      } catch {
                          Write-Warning "Failed to delete device $($device.name): $($_.Exception.Message)"
                      }
                  }
              }
          } catch {
              Write-Warning "Purge API call failed: $($_.Exception.Message)"
              Write-Host "This is normal if it's the first run or API credentials need setup"
          }
      
      - name: Establish Tailscale Connection with RDP4 hostname
        run: |
          $desiredHostname = "RDP4"
          Write-Host "Connecting with hostname: $desiredHostname"
          
          # Clean any existing local state
          & "$env:ProgramFiles\Tailscale\tailscale.exe" down
          Start-Sleep -Seconds 2
          
          # Force the desired hostname
          & "$env:ProgramFiles\Tailscale\tailscale.exe" up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=$desiredHostname --accept-routes=true --accept-dns=true --reset
          
          $tsIP = $null
          $retries = 0
          $maxRetries = 20
          
          while ($retries -lt $maxRetries) {
              $tsIP = & "$env:ProgramFiles\Tailscale\tailscale.exe" ip -4 2>$null
              if ($tsIP) { 
                  Write-Host "Successfully connected to Tailscale!"
                  break
              }
              Write-Host "Waiting for Tailscale connection... (Attempt $($retries + 1)/$maxRetries)"
              Start-Sleep -Seconds 3
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale failed to connect after $maxRetries attempts"
              exit 1
          }
          
          $tsHostname = & "$env:ProgramFiles\Tailscale\tailscale.exe" status --json 2>$null | ConvertFrom-Json | Select-Object -ExpandProperty Self | Select-Object -ExpandProperty DNSName -ErrorAction SilentlyContinue
          
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          echo "TAILSCALE_HOSTNAME=$tsHostname" >> $env:GITHUB_ENV
          echo "RDP_CONNECTION_STRING=$desiredHostname" >> $env:GITHUB_ENV
          Write-Host "Tailscale connected successfully!"
          Write-Host "IP: $tsIP"
          Write-Host "Hostname: $tsHostname"
      
      - name: Verify RDP Accessibility
        run: |
          Write-Host "Testing RDP connection to: $env:TAILSCALE_IP"
          
          $maxRetries = 10
          $retryCount = 0
          $connected = $false
          
          while ($retryCount -lt $maxRetries -and -not $connected) {
              try {
                  $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -InformationLevel Quiet -ErrorAction Stop
                  if ($testResult) {
                      $connected = $true
                      Write-Host "RDP connection successful!"
                      break
                  }
              } catch {
                  Write-Host "RDP test attempt $($retryCount + 1)/$maxRetries failed, retrying..."
              }
              $retryCount++
              Start-Sleep -Seconds 2
          }
          
          if (-not $connected) {
              Write-Error "RDP connection failed after $maxRetries attempts"
              exit 1
          }
      
      - name: Display Connection Information
        run: |
          Write-Host "`n=== RDP ACCESS INFORMATION ==="
          Write-Host "Connection Address: $env:RDP_CONNECTION_STRING"
          Write-Host "IP Address: $env:TAILSCALE_IP"
          Write-Host "Username: RDP4"
          Write-Host "=================================`n"
          
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "## RDP Connection Details"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Address:** $env:RDP_CONNECTION_STRING"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**IP Address:** $env:TAILSCALE_IP"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Username:** RDP4"
          Add-Content -Path $env:GITHUB_STEP_SUMMARY -Value "**Session Started:** $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')"

      - name: Auto-save files (runs in background)
        run: |
          function Backup-Files {
              param($sourcePath, $backupPath, $folderName)
              if (Test-Path $sourcePath -PathType Container) {
                  Remove-Item -Path "$backupPath/*" -Force -Recurse -ErrorAction SilentlyContinue
                  New-Item -ItemType Directory -Path $backupPath -Force
                  Copy-Item -Path "$sourcePath/*" -Destination $backupPath -Recurse -Force -ErrorAction SilentlyContinue
              }
          }
          
          while ($true) {
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] Auto-saving files..."
              Backup-Files -sourcePath "C:\Users\RDP4\Documents" -backupPath "./persistent-storage/Documents" -folderName "Documents"
              Backup-Files -sourcePath "C:\Users\RDP4\Desktop" -backupPath "./persistent-storage/Desktop" -folderName "Desktop"
              Backup-Files -sourcePath "C:\Users\RDP4\Downloads" -backupPath "./persistent-storage/Downloads" -folderName "Downloads"
              
              # Push to repo every 30 minutes
              if ((Get-Date).Minute % 30 -eq 0) {
                  git add ./persistent-storage/
                  git commit -m "Auto-backup: $(Get-Date -Format 'yyyy-MM-dd HH:mm')" || echo "No changes to commit"
                  git pull --rebase origin main
                  git push origin main
                  Write-Host "Changes pushed to repository"
              }
              
              Write-Host "[$(Get-Date -Format 'HH:mm:ss')] RDP Active - Connect to: $env:RDP_CONNECTION_STRING"
              Start-Sleep -Seconds 300  # 5 minutes
          }

      - name: Final backup and push
        if: always()
        run: |
          Write-Host "Performing final backup before shutdown..."
          if (Test-Path "C:\Users\RDP4\Documents" -PathType Container) {
              Remove-Item -Path "./persistent-storage/Documents/*" -Force -Recurse -ErrorAction SilentlyContinue
              Copy-Item -Path "C:\Users\RDP4\Documents/*" -Destination "./persistent-storage/Documents/" -Recurse -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "C:\Users\RDP4\Desktop" -PathType Container) {
              Remove-Item -Path "./persistent-storage/Desktop/*" -Force -Recurse -ErrorAction SilentlyContinue
              Copy-Item -Path "C:\Users\RDP4\Desktop/*" -Destination "./persistent-storage/Desktop/" -Recurse -Force -ErrorAction SilentlyContinue
          }
          if (Test-Path "C:\Users\RDP4\Downloads" -PathType Container) {
              Remove-Item -Path "./persistent-storage/Downloads/*" -Force -Recurse -ErrorAction SilentlyContinue
              Copy-Item -Path "C:\Users\RDP4\Downloads/*" -Destination "./persistent-storage/Downloads/" -Recurse -Force -ErrorAction SilentlyContinue
          }
          
          git add ./persistent-storage/
          git commit -m "Final backup: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')" || echo "No changes to commit"
          git pull --rebase origin main
          git push origin main
          
          Write-Host "Final backup completed successfully!"
